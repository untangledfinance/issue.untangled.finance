import{r as n,d as i,i as d}from"./index-BUY2Cjej.js";import{f as I}from"./index-YDRpzjTi.js";import{c4 as l}from"./vendor-WQejLG7Y.js";const r={getEvents:"/api/v1/event",getEventsByInvestor:"/api/v1/investment/event",getPortfolioDetail:"/api/v2/portfolio",getPoolList:"/api/v1/pool",getVaultList:"/api/v1/vault",getNoteTokenDetails:"/api/v1/tokens",updatePool:"/api/v1/pool/:id",updateVault:"/api/v1/vault/:id",createNewPool:"/api/v3/:poolId/pool",createNewVault:"/api/v3/:poolId/vault",getWithdrawPortfolio:"/api/v3/withdraw-request",cancelWithdrawRequestPortfolio:"api/v3/:poolId/withdraw-request/cancel",getPublicPoolDetail:"/api/v1/public/pool/:id",getNoteById:"/api/v1/event/:eventId",getPoolsToPay:"/api/v1/pools/currency/:currencyId",getPoolLinkedWallet:"/api/v1/pool/:poolId/wallet",getVaultLinkedWallet:"/api/v1/vault/:poolId/wallet",createUpdateFilterTemplate:"/api/v1/filter-template",initializePool:"/api/v1/pool/:id/initialize",closePool:"/api/v1/pool/:poolId/close",openPool:"/api/v1/pool/:poolId/open",closeVault:"/api/v1/vault/:poolId/close",openVault:"/api/v1/vault/:poolId/open",getPoolDetail:"/api/v1/pool/:id",getVaultDetail:"/api/v1/vault/:id",getPoolHistories:"/api/v1/pool/:poolId/history",getPoolDetailV2:"/api/v2/pool/:poolId",getPoolHolders:"/api/v2/pool/:poolId/holders",getVaultHolders:"/api/v2/vault/:vaultId/holders",getVaultTokenAssets:"/api/v2/vault/:poolId",getVaultAssets:"/vault/asset/:vaultContractAddress",addVaultAsset:"/vault/asset/:vaultContractAddress",getPoolHoldersExport:"/api/v2/pool/:poolId/holders/export",getVaultHoldersExport:"/api/v2/vault/:vaultId/holders/export",getPoolInvestorDetails:"/api/v1/pool/:poolId/kyc-users/wallets/:address",getPoolEvents:"/api/v1/pool/:poolId/event",getMainFilterTemplateInPool:"/api/v1/pool/:poolId/main-filter-template",getPoolFilterTemplates:"/api/v1/filter-template",getPoolByTx:"/api/v3/pool",getVaultByTx:"/api/v3/vault",getPoolWalletByTx:"/api/v3/pool-wallet/tx-hash/:txHash",getVaultWalletByTx:"/api/v3/vault-wallet/tx-hash/:txHash",getPoolScorecard:"/api/v3/:poolId/score-card",getPoolNoteTokenAssets:"/api/v1/pool/:poolId/note-token-asset",getPoolTokenAssets:"/api/v3/:poolId/note-token-asset",getFilterTemplateWithAssetsReport:"/api/v1/filter-template/:id/report",epochSetting:"/api/v3/pool/:poolId/epoch-setting",listEpoch:"/api/v3/:poolId/epochs",listEpochTransactionHistory:"/api/v3/:poolId/epochs/:epochId",activeEpoch:"/api/v3/:poolId/epoch/active",executeActiveEpoch:"/api/v3/:poolId/epoch/active",getListReportTemplate:"/api/v1/report-template",createUpdateCashflow:"/api/v1/cash-flow",createEvent:"/api/v3/:poolId/event",checkSOTEvent:"/api/v3/:poolId/event/sot",checkJOTEvent:"/api/v3/:poolId/event/jot",updateNote:"/api/v3/:poolId/event/legal",createUpdateAssetFilter:"/api/v1/filter-template/:templateId/filter/:filterName",deleteAssetFilter:"/api/v1/filter-template/:templateId/filter/:id",updateUploadCollateralDocId:"/api/v3/:poolId/pool/legal",updateDebtCeiling:"/api/v3/tx-hash/:tx?type=2",updateMinFirstLoss:"/api/v3/tx-hash/:tx?type=1",getPoolQuestionKey:"/api/v1/pool-question-key"},w={[d.ALFAJORES]:"0x8206B6d8c64f48b4b172778548E64404512E43fa",[d.AMOY]:"0xB0B2982b7F3fCeef49Cc781d6252e3BB1204b2a7"};class q{async closePool(t){const e=await n.getRequestInstance(),s=r.closePool.replace(":poolId",t),a=await e.post(s,{chainId:i.chainId}),{data:o}=a;return o}async openPool(t){const e=await n.getRequestInstance(),s=r.openPool.replace(":poolId",t),a=await e.post(s,{chainId:i.chainId}),{data:o}=a;return o}async closeVault(t){const e=await n.getRequestInstance(),s=r.closeVault.replace(":poolId",t),a=await e.post(s,{chainId:i.chainId}),{data:o}=a;return o}async openVault(t){const e=await n.getRequestInstance(),s=r.openVault.replace(":poolId",t),a=await e.post(s,{chainId:i.chainId}),{data:o}=a;return o}async getPools(t={}){const e=await n.getRequestInstance(),s=r.getPoolList,a=await e.get(s+`?${l.stringify({...t,filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async getPoolDetail({id:t}){const e=await n.getRequestInstance(),s=r.getPoolDetail.replace(":id",t),a=await e.get(s),{data:o}=a;return o}async getVaultDetail({id:t}){const e=await n.getRequestInstance(),s=r.getVaultDetail.replace(":id",t),a=await e.get(s),{data:o}=a;return o}async getPoolHistories(t){const e=await n.getRequestInstance(),s=r.getPoolHistories.replace(":poolId",t),a=await e.get(s),{data:o}=a;return o}async getPoolTransactions(t){const e=await n.getRequestInstanceV2(),s=r.getPoolDetailV2.replace(":poolId",t),a=await e.get(s),{data:o}=a;return o==null?void 0:o.poolActivities}async getPoolEvents(t){const e=await n.getRequestInstance(),s=r.getPoolEvents.replace(":poolId",t),a=await e.get(s),{data:o}=a;return o}async getMainFilterTemplateInPool(t){const e=await n.getRequestInstance(),s=r.getMainFilterTemplateInPool.replace(":poolId",t),a=await e.get(s),{data:o}=a;return o}async getPoolFilterTemplates(t,e){const s=await n.getRequestInstance(),a=r.getPoolFilterTemplates,o=new URLSearchParams;t&&o.append("poolId",t),e&&o.append("assetType",e);const c=await s.get(`${a}?${o.toString()}`),{data:p}=c;return p}async getPoolByTx(t){const e=await n.getRequestInstanceV3(),s=r.getPoolByTx,a=new URLSearchParams;t&&a.append("tx_hash",t);const o=await e.get(`${s}?${a.toString()}`),{data:c}=o;return c}async getVaultByTx(t){const e=await n.getRequestInstanceV3(),s=r.getVaultByTx,a=new URLSearchParams;t&&a.append("tx_hash",t);const o=await e.get(`${s}?${a.toString()}`),{data:c}=o;return c}async getPoolWalletByTx(t){const e=await n.getRequestInstanceV3(),s=r.getPoolWalletByTx.replace(":txHash",t),a=await e.get(s),{data:o}=a;return o}async getVaultWalletByTx(t){const e=await n.getRequestInstanceV3(),s=r.getVaultWalletByTx.replace(":txHash",t),a=await e.get(s),{data:o}=a;return o}async getUpdateDebtCeilingByTx(t){const e=await n.getRequestInstanceV3(),s=r.updateDebtCeiling.replace(":tx",t),a=await e.get(s),{data:o}=a;return o}async getUpdateMinFirstLossByTx(t){const e=await n.getRequestInstanceV3(),s=r.updateMinFirstLoss.replace(":tx",t),a=await e.get(s),{data:o}=a;return o}async getPoolScoreCard(t){const e=await n.getRequestInstanceV3(),s=r.getPoolScorecard.replace(":poolId",t),a=new URLSearchParams,o=await e.get(`${s}?${a.toString()}`),{data:c}=o;return c}async initializePool(t,e){const s=await n.getRequestInstanceV2(),a=r.initializePool.replace(":id",t),o=await s.post(a,e),{data:c}=o;return c}async createUpdateFilterTemplate(t){const e=await n.getRequestInstance(),s=r.createUpdateFilterTemplate,a=await e.post(s,{...t,chainId:i.chainId}),{data:o}=a;return o}async getEvents(){const t=await n.getRequestInstance(),e=r.getEvents,s=await t.get(e),{data:a}=s;return a}async getNoteById(t){const e=await n.getRequestInstance(),s=r.getNoteById.replace(":eventId",t),a=await e.get(s+`?${l.stringify({filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async getPoolsToPay(t){const e=await n.getRequestInstance(),s=r.getPoolsToPay.replace(":currencyId",t),a=await e.get(s+`?${l.stringify({filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async getPoolLinkedWallet(t){const e=await n.getRequestInstance(),s=r.getPoolLinkedWallet.replace(":poolId",t),a=await e.get(s+`?${l.stringify({filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async getVaultLinkedWallet(t){const e=await n.getRequestInstance(),s=r.getVaultLinkedWallet.replace(":poolId",t),a=await e.get(s+`?${l.stringify({filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async poolLinkWallet(t,e){const s=await n.getRequestInstance(),a=r.getPoolLinkedWallet.replace(":poolId",t),o=await s.post(a,{walletAddress:e,chainId:i.chainId}),{data:c}=o;return c}async getPublicPoolDetail({id:t}){const e=await n.getRequestInstance(),s=r.getPublicPoolDetail.replace(":id",t),a=await e.get(s),{data:o}=a;return o}async getPortfolioDetail(t){const e=await n.getRequestInstanceV2(),s=r.getPortfolioDetail,a=await e.get(s+`?${l.stringify({userAddress:t})}`),{data:o}=a;return o}async getEventsByInvestor(){const t=await n.getRequestInstance(),e=r.getEventsByInvestor,s=await t.get(e+`?${l.stringify({filter:{chainId:i.chainId}})}`),{data:a}=s;return a}async getPoolList(t={}){const e=await n.getRequestInstanceV2(),s=r.getPoolList,a=await e.get(s+`?${l.stringify({...t,filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async getVaultList(t={}){const e=await n.getRequestInstanceV2(),s=r.getVaultList,a=await e.get(s+`?${l.stringify({...t,filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async createNewPool(t,e){const s=await n.getRequestInstanceV3(),a=r.createNewPool.replace(":poolId",t);e.chainId=i.chainId;const o=await s.patch(a,e),{data:c}=o;return c}async createNewVault(t,e){const s=await n.getRequestInstanceV3(),a=r.createNewVault.replace(":poolId",t);e.chainId=i.chainId;const o=await s.patch(a,e),{data:c}=o;return c}async updatePool(t,e){const s=await n.getRequestInstance(),a=r.updatePool.replace(":id",t),o=await s.put(a,e),{data:c}=o;return c}async updateVault(t,e){const s=await n.getRequestInstance(),a=r.updateVault.replace(":id",t),o=await s.put(a,e),{data:c}=o;return c}async getWithdrawPortfolio(t){const e=await n.getOriginRequestInstance(),s=r.getWithdrawPortfolio,a=await e.get(s+`?${l.stringify({address:t})}`),{data:o}=a;return o}async cancelWithdrawRequestPortfolio(t,e){const s=await n.getOriginRequestInstance(),a=r.cancelWithdrawRequestPortfolio.replace(":poolId",t),o=await s.post(a,e),{data:c}=o;return c}async getPoolNoteTokenAssets(t){const e=await n.getRequestInstance(),s=r.getPoolNoteTokenAssets.replace(":poolId",t),a=await e.get(s+`?${l.stringify({filter:{chainId:i.chainId}})}`),{data:o}=a;return o}async getPoolTokenAssets(t){const e=await n.getRequestInstanceV3(),s=r.getPoolTokenAssets.replace(":poolId",t),a=await e.get(s),{data:o}=a;return o}async getVaultTokenAssets(t){const e=await n.getRequestInstanceV2(),s=r.getVaultTokenAssets.replace(":poolId",t),a=await e.get(s),{data:o}=a;return o}async getVaultAssets(t){const e=await n.getRequestInstanceV4(),s=r.getVaultAssets.replace(":vaultContractAddress",t),a=await e.get(s),{data:o}=a;return o}async addVaultAsset(t,e,s,a,o){const c=await n.getRequestInstanceV4(),p=r.addVaultAsset.replace(":vaultContractAddress",t),u=await c.post(p,{assetInfo:[{id:e,address:s,oracle:a,queryMethod:"getPrice()",queryParams:"",chainId:o}]}),{data:g}=u;return g}async getNoteTokenDetails(t){const e=await n.getRequestInstance(),s=r.getNoteTokenDetails,a=await e.post(s,{tokenAddresses:t}),{data:o}=a;return o}async getFilterTemplateWithAssetsReport(t,e,s){const a=await n.getRequestInstance(),o={};e!=="ACTUAL_DATA"&&(o.dataset=e),s&&(o.poolId=s);const c=`${r.getFilterTemplateWithAssetsReport.replace(":id",t)}`,p=await a.get(c+`?${l.stringify({...o,filter:{chainId:i.chainId}})}`),{data:u}=p;return u}async getListEpochHistory(t,e){const s=await n.getOriginRequestInstance(),a=r.listEpoch.replace(":poolId",t),o=await s.get(a+`?${l.stringify({chain:i.chainId,status:e},{arrayFormat:"brackets"})}`),{data:c}=o;return c}async getListEpochTransactionHistory(t,e){const s=await n.getOriginRequestInstance();let a=r.listEpochTransactionHistory.replace(":epochId",e);a=a.replace(":poolId",t);const o=await s.get(a+`?${l.stringify({chain:i.chainId})}`),{data:c}=o;return c}async getActiveEpoch(t){const e=await n.getOriginRequestInstance(),s=r.activeEpoch.replace(":poolId",t),a=await e.get(s+`?${l.stringify({chain_id:i.chainId})}`),{data:o}=a;return o}async executeActiveEpoch(t){const e=await n.getOriginRequestInstance(),s=r.executeActiveEpoch.replace(":poolId",t),a=await e.post(s+`?${l.stringify({chain_id:i.chainId})}`),{data:o}=a;return o}async getEpochSetting(t){const e=await n.getOriginRequestInstance(),s=r.epochSetting.replace(":poolId",t),a=await e.get(s+`?${l.stringify({chain_id:i.chainId})}`),{data:o}=a;return o}async updateEpochSetting(t,e){const s=await n.getOriginRequestInstance(),a=r.epochSetting.replace(":poolId",t),o=await s.put(a+`?${l.stringify({chain_id:i.chainId})}`,{epochInterval:e}),{data:c}=o;return c}async getListReportTemplate(t,e){const s=await n.getRequestInstance(),a=new URLSearchParams;t&&a.append("poolId",t),e&&a.append("assetType",e);const o=`${r.getListReportTemplate}?${a.toString()}`,c=await s.get(o),{data:p}=c;return p}async createUpdateCashflow(t){const e=await n.getRequestInstance(),s=r.createUpdateCashflow,a=await e.post(s,{...t,chainId:i.chainId}),{data:o}=a;return o}async createEvent(t,e){const s=await n.getRequestInstanceV3(),a=r.createEvent.replace(":poolId",t),o=await s.patch(a,e),{data:c}=o;return c}async checkSOTEvent(t,e){const s=await n.getRequestInstanceV3(),a=r.checkSOTEvent.replace(":poolId",t),o=new URLSearchParams;e&&o.append("tx_hash",e);const c=await s.get(`${a}?${o.toString()}`),{data:p}=c;return p}async checkJOTEvent(t,e){const s=await n.getRequestInstanceV3(),a=r.checkJOTEvent.replace(":poolId",t),o=new URLSearchParams;e&&o.append("tx_hash",e);const c=await s.get(`${a}?${o.toString()}`),{data:p}=c;return p}async updateNote(t,e){const s=await n.getRequestInstanceV3(),a=r.updateNote.replace(":poolId",t),o=await s.patch(a,{...e,chainId:i.chainId}),{data:c}=o;return c}async updateUploadCollateralDocId(t,e){const s=await n.getRequestInstanceV3(),a=r.updateUploadCollateralDocId.replace(":poolId",t),o=await s.patch(a,e),{data:c}=o;return c}async createUpdateAssetFilter(t,e,s){const a=await n.getRequestInstance(),o=r.createUpdateAssetFilter.replace(":templateId",t).replace(":filterName",e),c=await a.post(o,s),{data:p}=c;return p}async deleteAssetFilter(t,e){const s=await n.getRequestInstance(),a=r.deleteAssetFilter.replace(":templateId",t).replace(":id",e),o=await s.delete(a),{data:c}=o;return c}async getPoolMigration(t){const s=await(await n.getRequestInstance()).get(`/api/v1/pool-migration/${t}`),{data:a}=s;return a}async getVaultMigration(t){const s=await(await n.getRequestInstance()).get(`/api/v1/vault-migration/${t}`),{data:a}=s;return a}async createPoolMigration(t){const s=await(await n.getRequestInstance()).post("/api/v1/pool-migration/create",t),{data:a}=s;return a}async updatePoolMigration(t,e){const a=await(await n.getRequestInstance()).put(`/api/v1/pool-migration/${t}/edit`,e),{data:o}=a;return o}async getPoolValues(t){const s=await(await n.getRequestInstance()).get(`/api/v1/pool-values?poolId=${t}`),{data:a}=s;return a}async getVaultValues(t){const s=await(await n.getRequestInstance()).get(`/api/v1/vault-values?vaultId=${t}`),{data:a}=s;return a}async getPoolQuestionKey(){const e=await(await n.getRequestInstance()).get(r.getPoolQuestionKey),{data:s}=e;return s}async getPoolHolders(t){const e=n.getRequestInstanceV2(),s=r.getPoolHolders.replace(":poolId",t),a=await e.get(s),{data:o}=a;return(o==null?void 0:o.holders)??[]}async geVaultHolders(t){const e=n.getRequestInstanceV2(),s=r.getVaultHolders.replace(":vaultId",t),a=await e.get(s),{data:o}=a;return(o==null?void 0:o.holders)??[]}async getPoolHoldersExport(t){const e=n.getRequestInstanceV2(),s=r.getPoolHoldersExport.replace(":poolId",t);return await e.get(s,{responseType:"blob"})}async getVaultHoldersExport(t){const e=n.getRequestInstanceV2(),s=r.getVaultHoldersExport.replace(":vaultId",t);return await e.get(s,{responseType:"blob"})}async getPoolInvestorDetails(t,e){const s=n.getRequestInstance(),a=r.getPoolInvestorDetails.replace(":poolId",t).replace(":address",e),o=await s.get(a),{data:c}=o;return c}async updateCredioAssetRatings(t,e,s){const a=w[i.chainId],o=await I(t);console.log("updateCredioAssetRatings",e,s,a),await o.methods.updateAssetRiskScoreWithCredio(s,a).send({from:e,maxPriorityFeePerGas:null,maxFeePerGas:null})}}const R=new q;export{R as p};
